@model X.PagedList.IPagedList<LightNovel>
@using X.PagedList.Mvc.Core;
@{
    ViewData["Title"] = "Manage Light Novels";
    Layout = "_Layout";
    var searchQuery = ViewBag.SearchQuery as string ?? "";
}
<meta charset="UTF-8">
<meta name="description" content="Anime Template">
<meta name="keywords" content="Anime, unica, creative, html">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>Anime | Template</title>

<!-- Google Font -->
<link href="https://fonts.googleapis.com/css2?family=Oswald:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Mulish:wght@300;400;500;600;700;800;900&display=swap"
      rel="stylesheet">

<!-- Css Styles -->
<link rel="stylesheet" href="~/css/bootstrap.min.css" type="text/css">
<link rel="stylesheet" href="~/css/font-awesome.min.css" type="text/css">
<link rel="stylesheet" href="~/css/elegant-icons.css" type="text/css">
<link rel="stylesheet" href="~/css/plyr.css" type="text/css">
<link rel="stylesheet" href="~/css/nice-select.css" type="text/css">
<link rel="stylesheet" href="~/css/owl.carousel.min.css" type="text/css">
<link rel="stylesheet" href="~/css/slicknav.min.css" type="text/css">
<link rel="stylesheet" href="~/css/style.css" type="text/css">

<section class="product spad">
    <div class="container">
        <h2>Manage Light Novels</h2>
        <div class="row mb-3">
            <div class="col-md-6">
                <form asp-action="Index" method="get" class="form-inline">
                    <input type="text" name="searchQuery" value="@searchQuery" class="form-control mr-2" placeholder="Search by title..." />
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>
            </div>
            <div class="col-md-6 text-right">
                <button class="btn btn-primary" data-toggle="modal" data-target="#addModal">Add New Light Novel</button>
            </div>
        </div>
        <table class="table" id="lightNovelTable">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Episodes</th>
                    <th>Cost</th>
                    <th>Genre</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ln in Model)
                {
                    <tr data-id="@ln.Id">
                        <td>@ln.Title</td>
                        <td>@ln.Episodes</td>
                        <td>@ln.Cost</td>
                        <td>@(ln.Genre?.Name ?? "Unknown")</td>
                        <td>
                            <button class="btn btn-warning" data-toggle="modal" data-target="#editModal" onclick="fillEditForm(@ln.Id, '@ln.Title', @ln.Episodes, @ln.Cost, @ln.GenreId, '@ln.ImgUrl', '@ln.Link', @ln.Ranked, @ln.Read)">Edit</button>
                            <button class="btn btn-danger" data-toggle="modal" data-target="#deleteModal" onclick="setDeleteId(@ln.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="pagination-container">
            @Html.PagedListPager(Model, page => Url.Action("Index", new { searchQuery, page, broadcast = true }), 
                new PagedListRenderOptions 
                { 
                    LiElementClasses = new[] { "page-item" }, 
                    PageClasses = new[] { "page-link" },
                    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                    DisplayLinkToNextPage = PagedListDisplayMode.Always
                })
        </div>
        <div class="mt-4">
            <h4>Real-Time Updates</h4>
            <ul id="updateList" class="list-group"></ul>
        </div>
    </div>
</section>

<!-- Add Modal -->
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addModalLabel">Add Light Novel</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <form id="addForm" asp-action="Add" method="post" onsubmit="return validateAddForm()">
                <input type="hidden" name="searchQuery" value="@searchQuery" />
                <input type="hidden" name="page" value="@Model.PageNumber" />
                <div class="modal-body">
                    <div class="form-group">
                        <label>Title</label>
                        <input name="Title" id="addTitle" class="form-control" />
                        <span id="addTitleError" class="text-danger" style="display:none;">Title is required</span>
                    </div>
                    <div class="form-group">
                        <label>Episodes</label>
                        <input name="Episodes" id="addEpisodes" class="form-control" type="number" />
                        <span id="addEpisodesError" class="text-danger" style="display:none;">Episodes is required and must be a positive number</span>
                    </div>
                    <div class="form-group">
                        <label>Cost</label>
                        <input name="Cost" id="addCost" class="form-control" type="number" />
                        <span id="addCostError" class="text-danger" style="display:none;">Cost is required and must be a positive number</span>
                    </div>
                    <div class="form-group">
                        <label>Genre</label>
                        <select name="GenreId" id="addGenreId" class="form-control">
                            @foreach (var genre in ViewBag.Genres)
                            {
                                <option value="@genre.Id">@genre.Name</option>
                            }
                        </select>
                        <span id="addGenreIdError" class="text-danger" style="display:none;">Genre is required</span>
                    </div>
                    <div class="form-group">
                        <label>Image URL</label>
                        <input name="ImgUrl" id="addImgUrl" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Link</label>
                        <input name="Link" id="addLink" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Ranked</label>
                        <input name="Ranked" id="addRanked" class="form-control" type="number" />
                    </div>
                    <div class="form-group">
                        <label>Read Count</label>
                        <input name="Read" id="addRead" class="form-control" type="number" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Add</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Light Novel</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <form id="editForm" asp-action="Edit" method="post" onsubmit="return validateEditForm()">
                <input type="hidden" name="searchQuery" value="@searchQuery" />
                <input type="hidden" name="page" value="@Model.PageNumber" />
                <div class="modal-body">
                    <input type="hidden" name="Id" id="editId" />
                    <div class="form-group">
                        <label>Title</label>
                        <input name="Title" id="editTitle" class="form-control" />
                        <span id="editTitleError" class="text-danger" style="display:none;">Title is required</span>
                    </div>
                    <div class="form-group">
                        <label>Episodes</label>
                        <input name="Episodes" id="editEpisodes" class="form-control" type="number" />
                        <span id="editEpisodesError" class="text-danger" style="display:none;">Episodes is required and must be a positive number</span>
                    </div>
                    <div class="form-group">
                        <label>Cost</label>
                        <input name="Cost" id="editCost" class="form-control" type="number" />
                        <span id="editCostError" class="text-danger" style="display:none;">Cost is required and must be a positive number</span>
                    </div>
                    <div class="form-group">
                        <label>Genre</label>
                        <select name="GenreId" id="editGenreId" class="form-control">
                            @foreach (var genre in ViewBag.Genres)
                            {
                                <option value="@genre.Id">@genre.Name</option>
                            }
                        </select>
                        <span id="editGenreIdError" class="text-danger" style="display:none;">Genre is required</span>
                    </div>
                    <div class="form-group">
                        <label>Image URL</label>
                        <input name="ImgUrl" id="editImgUrl" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Link</label>
                        <input name="Link" id="editLink" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Ranked</label>
                        <input name="Ranked" id="editRanked" class="form-control" type="number" />
                    </div>
                    <div class="form-group">
                        <label>Read Count</label>
                        <input name="Read" id="editRead" class="form-control" type="number" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Light Novel</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <form asp-action="Delete" method="post">
                <input type="hidden" name="searchQuery" value="@searchQuery" />
                <input type="hidden" name="page" value="@Model.PageNumber" />
                <div class="modal-body">
                    <input type="hidden" name="id" id="deleteId" />
                    <p>Are you sure you want to delete this light novel?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/jquery-3.3.1.min.js"></script>
    <script src="~/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/lightNovelHub")
            .build();

        // Track the last processed update to prevent loops
        let lastUpdate = { searchQuery: '@searchQuery', page: @Model.PageNumber, timestamp: 0 };

        // Handle CRUD updates
        connection.on("ReceiveUpdate", (message) => {
            const li = document.createElement("li");
            li.className = "list-group-item";
            document.getElementById("updateList").prepend(li);

            // Close all modals
            $('#addModal').modal('hide');
            $('#editModal').modal('hide');
            $('#deleteModal').modal('hide');

            // Refresh with current state
            refreshPage('@searchQuery', @Model.PageNumber);
        });

        // Handle search and page updates
        connection.on("ReceivePageUpdate", (searchQuery, page) => {
            const now = Date.now();
            const updateKey = `${searchQuery}-${page}`;

            // Only process if it's a new update (different query/page or newer timestamp)
            if (updateKey !== `${lastUpdate.searchQuery}-${lastUpdate.page}` || now > lastUpdate.timestamp + 1000) {
                const li = document.createElement("li");
                li.className = "list-group-item";
                document.getElementById("updateList").prepend(li);

                lastUpdate = { searchQuery, page, timestamp: now };
                refreshPage(searchQuery, page);
            }
        });

        connection.start().catch(err => console.error(err));

        function refreshPage(searchQuery, page) {
            fetch(`/Admin/LightNovel/Index?searchQuery=${encodeURIComponent(searchQuery)}&page=${page}`)
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newTable = doc.querySelector('#lightNovelTable');
                    const newPagination = doc.querySelector('.pagination-container');
                    document.querySelector('#lightNovelTable').outerHTML = newTable.outerHTML;
                    document.querySelector('.pagination-container').outerHTML = newPagination.outerHTML;

                    // Update search input
                    document.querySelector('input[name="searchQuery"]').value = searchQuery;
                })
                .catch(err => console.error('Error refreshing page:', err));
        }

        function fillEditForm(id, title, episodes, cost, genreId, imgUrl, link, ranked, read) {
            document.getElementById('editId').value = id;
            document.getElementById('editTitle').value = title;
            document.getElementById('editEpisodes').value = episodes;
            document.getElementById('editCost').value = cost;
            document.getElementById('editGenreId').value = genreId;
            document.getElementById('editImgUrl').value = imgUrl || '';
            document.getElementById('editLink').value = link || '';
            document.getElementById('editRanked').value = ranked || '';
            document.getElementById('editRead').value = read || '';
        }

        function setDeleteId(id) {
            document.getElementById('deleteId').value = id;
        }

        function validateAddForm() {
            let isValid = true;

            document.getElementById('addTitleError').style.display = 'none';
            document.getElementById('addEpisodesError').style.display = 'none';
            document.getElementById('addCostError').style.display = 'none';
            document.getElementById('addGenreIdError').style.display = 'none';

            const title = document.getElementById('addTitle').value.trim();
            if (!title) {
                document.getElementById('addTitleError').style.display = 'block';
                isValid = false;
            }

            const episodes = document.getElementById('addEpisodes').value;
            if (!episodes || episodes <= 0) {
                document.getElementById('addEpisodesError').style.display = 'block';
                isValid = false;
            }

            const cost = document.getElementById('addCost').value;
            if (!cost || cost <= 0) {
                document.getElementById('addCostError').style.display = 'block';
                isValid = false;
            }

            const genreId = document.getElementById('addGenreId').value;
            if (!genreId) {
                document.getElementById('addGenreIdError').style.display = 'block';
                isValid = false;
            }

            return isValid;
        }

        function validateEditForm() {
            let isValid = true;

            document.getElementById('editTitleError').style.display = 'none';
            document.getElementById('editEpisodesError').style.display = 'none';
            document.getElementById('editCostError').style.display = 'none';
            document.getElementById('editGenreIdError').style.display = 'none';

            const title = document.getElementById('editTitle').value.trim();
            if (!title) {
                document.getElementById('editTitleError').style.display = 'block';
                isValid = false;
            }

            const episodes = document.getElementById('editEpisodes').value;
            if (!episodes || episodes <= 0) {
                document.getElementById('editEpisodesError').style.display = 'block';
                isValid = false;
            }

            const cost = document.getElementById('editCost').value;
            if (!cost || cost <= 0) {
                document.getElementById('editCostError').style.display = 'block';
                isValid = false;
            }

            const genreId = document.getElementById('editGenreId').value;
            if (!genreId) {
                document.getElementById('editGenreIdError').style.display = 'block';
                isValid = false;
            }

            return isValid;
        }
    </script>
}