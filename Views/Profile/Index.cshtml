@{
    ViewData["Title"] = "User Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var user = ViewData["User"] as ProjectPRNLamnthe180410.Models.User;
}

<meta charset="UTF-8">
<meta name="description" content="Anime Template">
<meta name="keywords" content="Anime, unica, creative, html">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<title>Anime | Template</title>

<!-- Google Font -->
<link href="https://fonts.googleapis.com/css2?family=Oswald:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Mulish:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">

<!-- Css Styles -->
<link rel="stylesheet" href="~/css/bootstrap.min.css" type="text/css">
<link rel="stylesheet" href="~/css/font-awesome.min.css" type="text/css">
<link rel="stylesheet" href="~/css/elegant-icons.css" type="text/css">
<link rel="stylesheet" href="~/css/plyr.css" type="text/css">
<link rel="stylesheet" href="~/css/nice-select.css" type="text/css">
<link rel="stylesheet" href="~/css/owl.carousel.min.css" type="text/css">
<link rel="stylesheet" href="~/css/slicknav.min.css" type="text/css">
<link rel="stylesheet" href="~/css/style.css" type="text/css">

<section class="product spad">
    <div class="container">
        <h2>User Profile</h2>
        <div class="row">
            <div class="col-lg-4 col-md-4">
                <div class="card">
                    <img src="@(user.ProfilePicture ?? "/img/default-profile.png")" class="card-img-top" alt="Profile Picture" style="max-height: 300px; object-fit: cover;">
                    <div class="card-body text-center">
                        <h5 class="card-title">@user.Username</h5>
                        <button class="btn btn-primary" data-toggle="modal" data-target="#editModal">Edit Profile</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-8 col-md-8">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Details</h5>
                        <dl class="row">
                            <dt class="col-sm-3">Username</dt>
                            <dd class="col-sm-9">@user.Username</dd>

                            <dt class="col-sm-3">Email</dt>
                            <dd class="col-sm-9">@user.Email</dd>

                            <dt class="col-sm-3">Coins</dt>
                            <dd class="col-sm-9">@(user.Coins.HasValue ? user.Coins.Value.ToString() : "0")</dd>

                            <dt class="col-sm-3">Description</dt>
                            <dd class="col-sm-9">@(user.Description ?? "No description provided.")</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-4">
            <h4>Real-Time Updates</h4>
            <ul id="updateList" class="list-group"></ul>
        </div>
    </div>
</section>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Profile</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <form id="editForm" asp-controller="Profile" asp-action="Edit" method="post" enctype="multipart/form-data" onsubmit="return validateEditForm()">
                <input type="hidden" name="Id" value="@user.Id" />
                <div class="modal-body">
                    <div class="form-group">
                        <label>Description</label>
                        <input name="Description" id="editDescription" class="form-control" value="@user.Description" />
                        <span id="editDescriptionError" class="text-danger" style="display:none;">Description is required</span>
                    </div>
                    <div class="form-group">
                        <label>Profile Picture</label>
                        <input type="file" name="profilePicture" id="editProfilePicture" class="form-control-file" accept="image/*" />
                        <small class="form-text text-muted">Current: @(user.ProfilePicture ?? "None")</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/jquery-3.3.1.min.js"></script>
    <script src="~/js/bootstrap.min.js"></script>
    <script src="~/js/player.js"></script>
    <script src="~/js/jquery.nice-select.min.js"></script>
    <script src="~/js/mixitup.min.js"></script>
    <script src="~/js/jquery.slicknav.js"></script>
    <script src="~/js/owl.carousel.min.js"></script>
    <script src="~/js/main.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/lightNovelHub")
            .build();

        connection.on("ReceiveUpdate", (message) => {
            const li = document.createElement("li");
            li.className = "list-group-item";
            location.reload();
            document.getElementById("updateList").prepend(li);

            $('#editModal').modal('hide');

            // Refresh profile data
            fetch('/Profile/Index')
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newContent = doc.querySelector('.container');
                    document.querySelector('.container').outerHTML = newContent.outerHTML;
                })
                .catch(err => console.error('Error refreshing profile:', err));
        });

        connection.start().catch(err => console.error(err));

        function validateEditForm() {
            let isValid = true;
            document.getElementById('editDescriptionError').style.display = 'none';

            const description = document.getElementById('editDescription').value.trim();

            if (!description) {
                document.getElementById('editDescriptionError').style.display = 'block';
                isValid = false;
            }

            return isValid;
        }
    </script>
}